
@{
    ViewData["Title"] = "Home";
    Layout = "_Layout";
    Guid id;
}

<h1 class="uk-heading-divider">Home</h1>
<div class="uk-grid-margin-small">
    <input name="search" class="uk-search uk-search-field uk-grid-width-small-1-3" placeholder="Search.."  v-model="Searchterm" v-on:input="filter()"/>
    <a class="uk-button-primary uk-grid-width-large-1-1 explorer-button" v-on:click="filter()">Search</a>
    <a class="uk-button-primary uk-grid-width-large-1-1 explorer-button" asp-controller="Home" asp-action="AddUser">Add</a>
</div>
<div class="uk-overflow-auto">
    <table class="uk-table uk-table-hover uk-table-striped uk-table-">
        <caption>Users</caption>
        <thead>
            <tr>
                <th>Name:</th>
                <th>Nationality:</th>
                <th>Email:</th>
                <th>Date of birth:</th>
                <th class="uk-text-nowrap"></th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="user in filtereditems">
                <td>{{user.firstName}} {{user.lastName}}</td>
                <td>{{user.nationality}}</td>
                <td>{{user.email}}</td>
                <td>{{user.birthDate}}</td>
                <td class="uk-text-nowrap">
                    <a class="uk-button-primary uk-preserve-width explorer-button" v-bind:href="`../UserDetails/${user.id}`">Edit</a>
                    <a class="uk-button-danger uk-preserve-width explorer-button" v-on:click="DeleteData(`${user.id}`)">Delete</a>
                </td>
            </tr>
        </tbody>
    </table>
</div>

@section Scripts{
    <script>
        var baseUrl = 'https://localhost:5001/api/countries';
        var app = new Vue({
            el: '#app',
            data: {
                users: [],
                Searchterm: "",
                filtereditems: [],
            },

            created: function () {
                var token = sessionStorage.getItem('token');
                if (token == null) {
                    window.location.href = window.location.origin + '/NotAllowed';
                }
                var jwt = JSON.parse(atob(token.split('.')[1]));
                if (jwt != null && jwt.role == "Admin") {
                    var self = this;
                    self.GetData();
                }
                else {
                    window.location.href = window.location.origin + '/NotAllowed';
                }
            },

            methods: {
                GetData: function () {
                    var self = this;
                    var token = sessionStorage.getItem('token');
                    const config = {
                        headers: { Authorization: `Bearer ${token}` }
                    };
                    axios.get(`${baseUrl}/users`, config)
                        .then((response) => {
                            self.users = response.data;
                            for (var i = 0; i < self.users.length; i++) {
                                var date = new Date(self.users[i].birthDate);
                                var dateInt = date.getDate();
                                var dateString = `${dateInt}`;
                                var monthInt = date.getMonth();
                                var monthString = `${monthInt}`;
                                if (dateInt < 10) dateString = `0${dateString}`;
                                if (monthInt < 10) monthString = `0${monthString}`;
                                self.users[i].birthDate = `${dateString}/${monthString}/${date.getFullYear()}`;
                            }
                            self.filtereditems = self.users;
                        }
                        )
                        .catch(function (error) {
                            self.Error = error.data
                        });
                },
                DeleteData: function (id) {
                    var self = this;
                    var token = sessionStorage.getItem('token');
                    const config = {
                        headers: { Authorization: `Bearer ${token}` }
                    };
                    axios.delete(`${baseUrl}/users/delete/${id}`, config)
                        .then((response) => {
                            alert("User has been deleted successfully");
                            self.GetData();                          
                        }
                        )
                        .catch(function (error) {
                            alert(error.data);
                        });
                },
                Navigate: function (id) {
                    var url = $`${window.current.location}/UserDetail/${id}`;
                    window.location.href(url)
                },

                filter: async function () {
                    var self = this;
                    var newFiltereditems = new Array();
                    self.filtereditems = self.users;
                    if (self.Searchterm.length > 0 && self.users != null) {
                        self.users.forEach(item => {
                            var fullName = `${item.firstName.toLowerCase()} ${item.lastName.toLowerCase()}`;
                            if (fullName.includes(self.Searchterm.toLowerCase())) {
                                newFiltereditems.push(item);
                                return;
                            }
                            if (item.firstName.toLowerCase().includes(self.Searchterm.toLowerCase())) {
                                newFiltereditems.push(item);
                                return;
                            }
                            if (item.lastName.toLowerCase().includes(self.Searchterm.toLowerCase())) {
                                newFiltereditems.push(item);
                                return;
                            }
                            if (item.nationality.toLowerCase().includes(self.Searchterm.toLowerCase())) {
                                newFiltereditems.push(item);
                                return;
                            }
                            if (item.email.toLowerCase().includes(self.Searchterm.toLowerCase())) {
                                newFiltereditems.push(item);
                                return;
                            }
                        });
                        self.filtereditems = newFiltereditems;
                    }
                }
            }
        });
    </script>
}

